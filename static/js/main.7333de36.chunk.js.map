{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieGenre","genre","className","MoviePoster","poster","alt","src","title","Movie","genres","synopsis","map","index","key","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","movies","movie","console","log","title_english","medium_cover_image","id","_getMovies","a","_callApi","setState","fetch","then","response","json","data","catch","err","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wVAiCA,SAASA,EAAT,GAA6B,IAARC,EAAO,EAAPA,MACpB,OACC,0BAAMC,UAAU,eAAeD,EAA/B,KAIF,SAASE,EAAT,GAAoC,IAAdC,EAAa,EAAbA,OAAQC,EAAK,EAALA,IAC7B,OACC,yBAAKC,IAAKF,EAAQC,IAAKA,EAAKE,MAAOF,EAAKH,UAAU,iBAqBrCM,MAxDf,YAAiD,IAAjCD,EAAgC,EAAhCA,MAAMH,EAA0B,EAA1BA,OAAQK,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,SACrC,OACC,yBAAKR,UAAU,SACd,yBAAKA,UAAU,gBACd,kBAACC,EAAD,CAAaC,OAAQA,EAAQC,IAAKE,KAEnC,yBAAKL,UAAU,gBACd,4BAAKK,GACL,yBAAKL,UAAU,gBACbO,EAAOE,KAAI,SAACV,EAAOW,GAAR,OAAkB,kBAACZ,EAAD,CAAYC,MAAOA,EAAOY,IAAKD,QAE9D,yBAAKV,UAAU,kBACd,kBAAC,IAAD,CACCY,KAAMJ,EACNK,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCyDCC,E,2MAlEbC,MAAQ,G,EAuBRC,cAAgB,WAWd,OAVe,EAAKD,MAAME,OAAOX,KAAI,SAACY,GAElC,OADFC,QAAQC,IAAIF,GACH,kBAAC,EAAD,CACLhB,MAAOgB,EAAMG,cACbtB,OAAQmB,EAAMI,mBACdd,IAAKU,EAAMK,GACXnB,OAAQc,EAAMd,OACdC,SAAUa,EAAMb,e,EAOxBmB,W,sBAAa,4BAAAC,EAAA,sEACU,EAAKC,WADf,OACLT,EADK,OAEX,EAAKU,SAAS,CACZV,WAHS,2C,EAQbS,SAAW,WACT,OAAOE,MAAM,yDACZC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,UACvBgB,OAAO,SAAAC,GAAG,OAAIf,QAAQC,IAAIc,O,oFArD3Bf,QAAQC,IAAI,mB,0CAQZe,KAAKX,e,+BAiDLL,QAAQC,IAAI,cADN,IAEEH,EAAWkB,KAAKpB,MAAhBE,OACR,OACA,yBAAKpB,UAAWoB,EAAS,MAAQ,gBAG9BA,EAASkB,KAAKnB,gBAAkB,e,GAlErBoB,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnB,MAAK,SAAAoB,GACjCA,EAAaC,kB","file":"static/js/main.7333de36.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis'\r\nimport './Movie.css';\r\n\r\n\r\nfunction Movie({title,poster, genres, synopsis}){\r\n\treturn (\r\n\t\t<div className=\"Movie\">\r\n\t\t\t<div className=\"Movie_Column\">\r\n\t\t\t\t<MoviePoster poster={poster} alt={title}/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"Movie_Column\">\r\n\t\t\t\t<h1>{title}</h1>\r\n\t\t\t\t<div className=\"Movie_Genres\">\r\n\t\t\t\t\t{genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"Movie_Synopsis\">\r\n\t\t\t\t\t<LinesEllipsis\r\n\t\t\t\t\t\ttext={synopsis}\r\n\t\t\t\t\t\tmaxLine='1'\r\n\t\t\t\t\t\tellipsis='...'\r\n\t\t\t\t\t\ttrimRight\r\n\t\t\t\t\t\tbasedOn='letters'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n    \t\t\r\n    \t\t\r\n    \t</div>\r\n\t)\r\n}\r\nfunction MovieGenre({genre}){\r\n\treturn(\r\n\t\t<span className=\"Movie_Genre\">{genre} </span>\r\n\t)\r\n}\r\n\r\nfunction MoviePoster({poster, alt}){\r\n\treturn(\r\n\t\t<img src={poster} alt={alt} title={alt} className=\"Movie_Poster\"/>\r\n\t)\r\n}\r\nMovie.propTypes = {\r\n\ttitle:  PropTypes.string.isRequired,\r\n\tposter: PropTypes.string.isRequired,\r\n\tsynopsis : PropTypes.string.isRequired,\r\n\tgenres : PropTypes.array.isRequired\r\n}\r\n\r\n\r\nMoviePoster.propTypes ={\r\n\tposter : PropTypes.string.isRequired,\r\n\talt : PropTypes.string.isRequired\r\n}\r\n\r\nMovieGenre.propTypes ={\r\n\tgenre : PropTypes.string.isRequired\r\n}\r\n\r\n\r\nexport default Movie;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport Movie from './Movie';\n\n// component 라이프사이클\n// Render : componentWillMount() => render() => componentDidMount()\n// Update : componentWillReceiveProps() -> shouldComponentUpdate() => componentWillUpdate() => render() => componentDidUpdate()\n\nclass App extends Component {\n  \n  componentWillMount(){\n    console.log('App willMount');\n  }\n\n  state = {\n  }\n\n  \n  componentDidMount(){\n    this._getMovies();\n    {/*\n    fetch('https://yts.lt/api/v2/list_movies.json?')\n    //promise\n    //위의 라인이 완료되면, 아래의 명령어가 실행 \n    //then function은 1개의 attribute만 줌(object)\n    //response : fetch의 결과물로 리턴된 것 (변수명 설정 가능)\n    //.json() : 바이트코드(readable stream)로 이뤄진 코드를 json으로 바꿔줌  \n    .then(response => response.json())\n    .then(json => console.log(json))\n    //에러 발생시 \n    .catch( err => console.log(err))\n     */}\n  }\n \n\n\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) =>{\n      console.log(movie)\n        return <Movie \n          title={movie.title_english}\n          poster={movie.medium_cover_image}\n          key={movie.id}\n          genres={movie.genres} \n          synopsis={movie.synopsis}\n        />\n      })\n    return movies\n  }\n\n  //async function\n  _getMovies = async() => {\n    const movies = await this._callApi()\n    this.setState({\n      movies\n    })\n  }\n\n  // api 호출 function\n  _callApi = () => {\n    return fetch('https://yts.lt/api/v2/list_movies.json?sort_by=rating')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch( err => console.log(err))\n  }\n\n  render(){\n    console.log('app render');\n    const { movies } = this.state;\n    return(\n    <div className={movies ? \"App\" : \"App--loading\"}>\n      {/*this.state.movies 에 값이 있으면 this._renderMovies() 호출,\n      없을시 'Loading' 문구 출력*/}\n      {movies ? this._renderMovies() : 'Loading'}\n    </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}